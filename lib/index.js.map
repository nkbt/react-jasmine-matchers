{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;AAEA,YAAY,CAAC;;AAGb,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC;;AAGzC,UAAU,CAAC;SAAM,OAAO,CAAC,WAAW,CAAC;;AAGnC,UAAM,EAAE;aAAO,EAAC,OAAO,EAAE,iBAAA,MAAM;iBAAK,EAAC,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,EAAC;SAAC,EAAC;KAAC;;AAG1E,YAAQ,EAAE,kBAAA,SAAS;aAAK;AACtB,eAAO,EAAE,iBAAA,MAAM;iBAAK,EAAC,IAAI,EAAE,SAAS,CAAC,eAAe,CAAC,MAAM,EAAE,SAAS,CAAC,EAAC;SAAC;OAC1E;KAAC;;AAGF,WAAO,EAAE;aAAO,EAAC,OAAO,EAAE,iBAAA,MAAM;iBAAK,EAAC,IAAI,EAAE,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,EAAC;SAAC,EAAC;KAAC;;AAGhF,YAAQ,EAAE;aAAO,EAAC,OAAO,EAAE,iBAAA,MAAM;iBAAK,EAAC,IAAI,EAAE,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAC;SAAC,EAAC;KAAC;;AAGvF,cAAU,EAAE,oBAAA,SAAS;aAAK;AACxB,eAAO,EAAE,iBAAA,MAAM;iBAAK,EAAC,IAAI,EAAE,SAAS,CAAC,4BAA4B,CAAC,MAAM,EAAE,SAAS,CAAC,EAAC;SAAC;OACvF;KAAC;;;;;AAMF,cAAU,EAAE;aAAO;AACjB,eAAO,EAAE,iBAAC,OAAO,EAAE,IAAI,EAAK;AAC1B,cAAM,MAAM,GAAG,IAAI,YAAY,MAAM,GAAG,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACtE,cAAM,IAAI,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC5D,cAAM,OAAO,GAAG,IAAI,cACT,IAAI,+CACJ,IAAI,qCAAkC,CAAC;AAClD,iBAAO,EAAC,IAAI,EAAJ,IAAI,EAAE,OAAO,EAAP,OAAO,EAAC,CAAC;SACxB;OACF;KAAC;;GAGH,CAAC;CAAA,CAAC,CAAC","file":"index.js","sourcesContent":["/* global jasmine, beforeEach */\n\n'use strict';\n\n\nconst TestUtils = React.addons.TestUtils;\n\n\nbeforeEach(() => jasmine.addMatchers({\n\n\n  toBeEl: () => ({compare: actual => ({pass: TestUtils.isElement(actual)})}),\n\n\n  toBeElOf: compClass => ({\n    compare: actual => ({pass: TestUtils.isElementOfType(actual, compClass)})\n  }),\n\n\n  toBeDom: () => ({compare: actual => ({pass: TestUtils.isDOMComponent(actual)})}),\n\n\n  toBeComp: () => ({compare: actual => ({pass: TestUtils.isCompositeComponent(actual)})}),\n\n\n  toBeCompOf: compClass => ({\n    compare: actual => ({pass: TestUtils.isCompositeComponentWithType(actual, compClass)})\n  }),\n\n\n  /**\n   * Validate if element's DOM node has text\n   */\n  toHaveText: () => ({\n    compare: (element, text) => {\n      const regexp = text instanceof RegExp ? text : new RegExp(text, 'ig');\n      const pass = element.getDOMNode().textContent.match(regexp);\n      const message = pass ?\n        `Text \"${text}\" is found within an element` :\n        `Text \"${text}\" is not found within an element`;\n      return {pass, message};\n    }\n  })\n\n\n}));\n"]}