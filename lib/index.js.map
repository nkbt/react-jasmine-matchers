{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAGb,MAAM,CAAC,OAAO,GAAG,UAAA,SAAS;SAAK;AAC7B,UAAM,EAAE;aAAO;AACb,eAAO,EAAE,iBAAA,SAAS;iBACf,EAAC,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,EAAC;SAAC;OAC3C;KAAC;;AAGF,YAAQ,EAAE;aAAO;AACf,eAAO,EAAE,iBAAC,SAAS,EAAE,aAAa;iBAC/B,EAAC,IAAI,EAAE,SAAS,CAAC,eAAe,CAAC,SAAS,EAAE,aAAa,CAAC,EAAC;SAAC;OAChE;KAAC;;AAGF,WAAO,EAAE;aAAO;AACd,eAAO,EAAE,iBAAA,SAAS;iBACf,EAAC,IAAI,EAAE,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,EAAC;SAAC;OAChD;KAAC;;AAGF,YAAQ,EAAE;aAAO;AACf,eAAO,EAAE,iBAAA,SAAS;iBACf,EAAC,IAAI,EAAE,SAAS,CAAC,oBAAoB,CAAC,SAAS,CAAC,EAAC;SAAC;OACtD;KAAC;;AAGF,cAAU,EAAE;aAAO;AACjB,eAAO,EAAE,iBAAC,SAAS,EAAE,aAAa;iBAC/B,EAAC,IAAI,EAAE,SAAS,CAAC,4BAA4B,CAAC,SAAS,EAAE,aAAa,CAAC,EAAC;SAAC;OAC7E;KAAC;;;;;AAMF,cAAU,EAAE;aAAO;AACjB,eAAO,EAAE,iBAAC,OAAO,EAAE,IAAI,EAAK;AAC1B,cAAM,MAAM,GAAG,IAAI,YAAY,MAAM,GAAG,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACtE,cAAM,IAAI,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC5D,cAAM,OAAO,GAAG,IAAI,cACT,IAAI,+CACJ,IAAI,qCAAkC,CAAC;AAClD,iBAAO,EAAC,IAAI,EAAJ,IAAI,EAAE,OAAO,EAAP,OAAO,EAAC,CAAC;SACxB;OACF;KAAC;GACH;CAAC,CAAC","file":"index.js","sourcesContent":["'use strict';\n\n\nmodule.exports = TestUtils => ({\n  toBeEl: () => ({\n    compare: component =>\n      ({pass: TestUtils.isElement(component)})\n  }),\n\n\n  toBeElOf: () => ({\n    compare: (component, componentType) =>\n      ({pass: TestUtils.isElementOfType(component, componentType)})\n  }),\n\n\n  toBeDom: () => ({\n    compare: component =>\n      ({pass: TestUtils.isDOMComponent(component)})\n  }),\n\n\n  toBeComp: () => ({\n    compare: component =>\n      ({pass: TestUtils.isCompositeComponent(component)})\n  }),\n\n\n  toBeCompOf: () => ({\n    compare: (component, componentType) =>\n      ({pass: TestUtils.isCompositeComponentWithType(component, componentType)})\n  }),\n\n\n  /**\n   * Validate if element's DOM node has text\n   */\n  toHaveText: () => ({\n    compare: (element, text) => {\n      const regexp = text instanceof RegExp ? text : new RegExp(text, 'ig');\n      const pass = element.getDOMNode().textContent.match(regexp);\n      const message = pass ?\n        `Text \"${text}\" is found within an element` :\n        `Text \"${text}\" is not found within an element`;\n      return {pass, message};\n    }\n  })\n});\n"]}